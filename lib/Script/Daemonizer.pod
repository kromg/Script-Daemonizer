# vim: se tw=80 ts=4 et:

=head1 NAME

Script::Daemonizer - Turns your script into a UNIX daemon process (the easy way).

=head1 VERSION

Version 0.90.00


=head1 SYNOPSIS

    use Script::Daemonizer;
    ...
    Script::Daemonizer::daemonize();
    Script::Daemonizer::drop_privileges(
        uid => $to_uid, 
        gid => $to_gid
    );
    Script::Daemonizer::restart();
    ...

=head1 ABSTRACT

This module turns your script into a UNIX daemon by requiring as little
modification as possible, thus letting you concentrate on solving 
your problem, rather than on writing a daemon. Just get your job done, then 
turn your script into a daemon by calling daemonize(). 

It tries to redirect all messages to syslog by default, using Tie::Syslog.


=head1 DESCRIPTION

daemonize() is the main routine of this module. What it does, out-of-the-box,
is: 

=over 4

=item 1.* it sets umask() to 0. You must then set explicitly file and 
directory permissions upon creating them, restore umask() after initialization,
or specify I<umask> option (see L</ADVANCED USAGE> for details).

=item 2.  it calls fork(), then the parent exits;

=item 3.  it calls POSIX::setsid() (see L<POSIX::setsid()>), so the process becomes session leader;

=item 4.  it calls fork() again, then the parent exits; 

=item 5.* it changes its working directory to "/";

=item 6.* it closes all open file descriptors and tries to
reopen STDIN from /dev/null;

=item 7.* it ties STDOUT and STDERR to Syslog using  C<Tie::Syslog> (if
available, otherwise it reopens them on /dev/null) so that all output is 
logged to syslog (see L<Tie::Syslog>);

=back

Steps marked by * are configurable; some additional steps are also available if
explicitly requested; see L</ADVANCED USAGE> for details.

=head1 EXPORT

Nothing is exported by default, and nothing needs to be imported. You can 

    use Script::Daemonize qw(daemonize);
    ...
    daemonize();

or simply call daemonize() with its full name: 

    use Script::Daemonize;
    ...
    Script::Daemonizer::daemonize();


=head1 SUBROUTINES

=head2 daemonize()

It runs through all the steps required to send your program to background as a
daemon. Its behaviour can be customized a little, see L</ADVANCED USAGE> for
details.

=head2 drop_privileges()

    # Just drop effective user/group id:
    drop_privileges(
        euid => $to_euid,
        egid => $to_egid,
    );

    # Drop both effective and real ids: 
    drop_privileges(
        uid  => $to_uid,
        gid  => $to_gid,
    );

Tries to drop priviles to given EUID/EGID or UID/GID (single (e)uid/(e)gid
allowed).
See L<perldoc perlvar> for details on IDs. 

daemonize() will automatically call drop_privileges() if configured to do so
(guess what? See L</ADVANCED USAGE> for details) but this will happen 
B<before> anything else (think of this as step 0). If you need to drop
privileges at a later moment, use drop_privileges(), otherwise it's probably
safer to do so while daemonize()-ing. 

=head2 restart()

restart() is there to let you restart completely the daemon. A simple way to
handle SIGHUP might be restarting, for example (see 
L<perlipc|http://perldoc.perl.org/perlipc.html#Handling-the-SIGHUP-Signal-in-Daemons>
for details). 

    # Restart upon sighup - use a closure to call restart()
    $SIG{HUP} = sub {
        Script::Daemonizer::restart;
    }; 

B<pidfile> (see L</ADVANCED USAGE> for details) is kept open and locked 
upon restart (if configured) so no race condition should happen. 

You can pass command line args to restart() to modify command line on-the-fly: 

    use Script::Daemonizer qw/restart/;

    # Do some mangling to @ARGV
    ...

    restart(@my_modified_argv);

The defaul is to use a copy of @ARGV taken at compile-time (before any
command-line-parsing modifies @ARGV, for example). 

=head2 sigunmask()

    Script::Daemonizer::sigunmask( @signals );

Strictly related to restart(), sigunmask() is there to let you unmask signals
without pain. See L<http://docstore.mik.ua/orelly/perl4/cook/ch17_19.htm>
for details on why you should unmask signals. In short: inside a signal handler
the signal that triggered the handler is blocked. If inside a signal handler you
re-exec() yourself, the new process inherits the blocked signal. That is why you
could want to unmask that signal after a new start. 

B<SGIHUP is unmasked by defautl>, just by saying C<use Script::Daemonizer>. 

If you use restart() with other signals, remember to unmask them: 

    # Restart on SIGHUP, SIGQUIT and SIGUSR1
    for my $nal in (qw/HUP QUIT USR1/) {
        $SIG{$nal} = sub {
            Script::Daemonizer::restart;
        }
    }

    # Just in case we came from another instance of ourselves via an exec()
    # (no need to bother for SIGHUP since we unmask it by default, anyway
    # listing it here it's harmless): 

    Script::Daemonizer::sigunmask(qw{QUIT USR1});


=head1 ADVANCED USAGE

I strive to make this module support "standard" daemon features
out-of-the-box (for some definition of "standard"). Some of these features can
be configured, and some other are enabled only if configured. 

=head2 ADVANCED SYNOPSYS

Advanced configuration syntax is the following: 

    use Script::Daemonizer;
    Script::Daemonizer::daemonize(
        name            => "My wonderful new daemon",      # tag for logging
        do_not_close_fh => 1,                              # don't touch my filehandles!
        umask           => $my_umask,                      # set umask to $my_umask
        working_dir     => "/var/ftp",                     # try to chdir here
        drop_privileges => {                               # same as drop_privileges()
            uid  => $to_uid,
            gid  => $to_gid,
        },
    );

    # or

    Script::Daemonizer::daemonize(
        name => "My wonderful new daemon",                 # tag for logging
        keep => [ 0, 1, 2, $myfh, $anotherfh, 42 ],        # don't close these FD/FH
    );

    # or

    Script::Daemonizer::daemonize(
        name                  => "ddddddaeeemonnn",        # tag for logging
        do_not_tie_stdhandles => 1,                        # skip tie-to-syslog
    );
    
    # or

    Script::Daemonizer::daemonize(
        name                  => "Yeah",                   # tag for logging
        tie_to_log4perl       => 1,                        # try tying with Tie::Log4perl
    );
    

=head2 OPTIONAL ACTIONS

Some options have no default and thus corresponding actions are skipped if not
configured. These are: 

=over 4

=item * Step 0.0 - privileges dropping

It happens before anything else. This simply calls drop_privileges() internally. 

=item * Step 0.1 - pidfile creation (and locking)

This implicitly provides a method to ensure that only one copy of your daemon 
is running at once, because pidfile is locked. PID is written into pidfile only
after the second fork() has been completed. 

=item * Handling of SIGHUP as a restart()

You must set up restart() as the handler of SIGHUP yourself. See 
L</restart()> for details.

=item * Unmaksing signals

If you use signals other than SIGHUP for restarting, remember to sigunmask()
them (see L</sigunmaks()> for details).

=back


=head2 ADVANCED OPTIONS

Advanced options are the following: 

=head3 B<name>

Sets the name of the daemon. This is used for logging. 

I<default>: script name, got from $0, split on '/';

=head3 B<do_not_close_fh>

Skips the close and re-open filehandles phase of initialization. This means that
the tie-to-syslog part will be skipped as well. 

I<default>: C<undef> - close all filehandles; if possible, tie STDOUT and STDERR
to syslog.

=head3 B<do_not_tie_stdhandles> 

Define this to close STDOUT/STDERR and reopen them from /dev/null.

    # close both stdhandles and reopen them on /dev/null
    Script::Daemonizer::daemonize(
        name                  => 'Sort of a daemon',
        do_not_tie_stdhandles => 1,
    );

Default is to tie STDOUT and STDERR with to facility LOG_DAEMON, priorities
LOG_INFO and LOG_ERR, logopt 'pid,ndely' (see L<Tie::Syslog> for details).

I<default>: C<undef> - tie stdhandles so that output will go to syslog.

=head3 B<keep>

    # Unqualified NAMES will be qualified as *main::$FH_NAME
    Script::Daemonizer::daemonize(
        keep => [
            "STDIN",                # A filehandle, by name
            *STDOUT,                # A filehandle
            \*STDERR,               # A fh reference
            3,                      # file descriptor number
            "MyPkg::FH",            # F-Q filehandle name
            $myfh                   # Another fh reference
        ],
    );

This option requires a reference to an array containing the filehandles to be
kept open, or the corresponding file descriptor (as returned by C<fileno()>).
It is ingored if I<do_not_close_fh> was specified (because redundant).

If STDOUT/STDERR (or the corresponding file descriptor: 1 or 2) were specified,
then that handle would not be closed and, consequently, not tied to Syslog. 
To tie just one of the two filehandles, specify the other in I<keep> and then
close it (or keep it open, or whatever you prefer):

    # Tie just STDERR to syslog, discard STDOUT:
    Script::Daemonizer::daemonize(
        name => 'Sort of a daemon',
        keep => [ 1 ],
    );
    open(STDOUT, '>', '/dev/null') or die "Cannot reopen STDOUT on /dev/null: $!"

I<default>: C<undef> - close all filehandles.

=head3 B<pidfile>

This will try to:

=over 4

=item - open named pidfile, creating it if non-existent;

=item - lock it (exclusively);

=back

If this operation fails, daemonize() will croak(). Otherwise, PID of the process
will be written to the named pidfile after the second fork() is done. 

    Script::Daemonizer::daemonize(
        name    => 'A new daemon',
        pidfile => '/var/run/anewdaemon.pid',
    );

This lock mechanism provides the following advantages:

=over 4

=item * no other instances of the same daemon will overwrite the pidfile on
purpose;

=item * the pid file will serve as a lock file, ensuring no other instances of
the same daemon will start;

=item * an C<fuser> (see L<fuser(1)>) on the pidfile will reveal the daemon's pid. If 
the daemon is not running, the pidfile will not be in use by any process 
(hopefully). A simple: 

    $ fuser -k $PIDFILE

will end up killing the daemon (or provides an easy way to signal the daemon).

=back

=head3 B<tie_to_log4perl>

Try using Tie::Log4perl instead of Tie::Syslog to redirect STDOUT and STDERR.

I<default>: C<undef> - use Tie::Syslog.

=head3 B<umask>

Set the specified umask.

default: 0

=head3 B<working_dir>

Try to chdir() to the specified directory.

default: '/'

=head2 LOCKING

If you want to be sure no multiple instances of your daemon will be running,
just use I<pidfile> advanced option. See L</pidfile> for details.


=head1 CAVEATS

=head2 Concerning filehandles

Filehandles cannot really be closed. See the sources of C<Proc::Daemon> and
L<this|http://rt.perl.org/rt3/Ticket/Display.html?id=72526> discussion for
details.

Briefly: POSIX::close() issues a close on Operating System's side, but
our process keeps a filehandle opened somewhere. Tracking these filehandles (or
fh references) from inside a namespace (such as Script::Daemonizer) is neither
easy, nor possible in general (think about lexical references in other
namespaces: they're just non accessible from Script::Daemonizer at all, nor
maybe from main::, if they're confined somewhere in modules). So the best we can
do is go through a POSIX::close() on all file descriptors and then try to reopen
as many fh as needed to get all those fd opened on /dev/null, so that associated
filehandles are still open, but redirected on /dev/null. 

In other words, if your script opens a lot of filehandles before calling
daemonize(), you will still find them open, but towards /dev/null, after
daemonize()-ing. The only way to grt rid of them is to close() them all just 
where they were created (or let the filehandles/references go out of scope).  


=head1 FAQ

=head2 Q: Why is there no built-in start/stop/* method? 

A: Because to start/stop/* a daemon you usually don't call the daemon itself,
instead you rely on system tools that allow process control (if you need an S<<
"init script" >> then write one) and interact with processes through singals.
Lack of start/stop/* methods is regardes as a feature. 

=head2 Q: Why are Tie::Syslog and Tie::Log4perl not listed as prerequisites? 

A: Because you may want to skip Syslog/Log4perl support and not install those
modules. This module will work nonetheless, without using them (and without the
features they provide, of course).


=head1 TODO

Some ideas: 

=over 4 

=item * Let user set her own options for tied STDOUT/STDERR (i.e. logopt for
syslog (see L<Sys::Syslog>), facility, priority).

=item * Provide a function to automatically parse command line (via
L<Getopt::Long|Getopt::Long>).

=item * Provide a function to automatically handle configuration file (via 
L<Config::General|Config::General>).

=back



=head1 AUTHOR

Giacomo Montagner, C< <gmork at entirelyunlike.net> >, C< <gmork.gmork at
gmail.com> >

=head1 BUGS

Please report any bugs or feature requests to C<bug-script-daemonizer at 
rt.cpan.org>, or through the web interface at 
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Script-Daemonizer>.  I will be
notified, and then you'll automatically be notified of progress on your bug as 
I make changes.



=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Script::Daemonizer


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker (report bugs here)

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Script-Daemonizer>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Script-Daemonizer>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Script-Daemonizer>

=item * Search CPAN

L<http://search.cpan.org/dist/Script-Daemonizer/>

=back


=head1 ACKNOWLEDGEMENTS

=over 4

=item * S<"Advanced Programming in the UNIX Environment: Second Edition">, 
S<by W. Richard Stevens, Stephen A. Rago>, 
S<Copyright 2005 Addison Wesley Professional>

=item * Part of the code was inspired (or taken) from Proc::Daemon, by 
Earl Hood and Detlef Pilzecker. 

=back



=head1 LICENSE AND COPYRIGHT

Copyright (C) 2012 Giacomo Montagner, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.


=cut


